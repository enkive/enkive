/*******************************************************************************
 * Copyright 2013 The Linux Box Corporation.
 *
 * This file is part of Enkive CE (Community Edition).
 *
 * Enkive CE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Enkive CE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Enkive CE. If not, see
 * <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package com.linuxbox.enkive.workspace.searchResult;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.linuxbox.enkive.workspace.WorkspaceException;

/**
 * Abstract representation of a search result.  A result consists of the map of
 * UID to message IDs that match the search, and a link to the @ref SearchQuery that
 * generated the results.
 *
 * The UID is just a sequential integer that is unique in this query.  However,
 * for IMAP, it must remain stable across connections, and so must be stored in
 * the DB.
 * @author dang
 *
 */
public abstract class SearchResult {

	private String id;
	private Map<Long, String> messageIds;
	protected String searchQueryId;
	protected Long nextUID;

	public SearchResult() {
		messageIds = new HashMap<Long, String>();
		nextUID = (long) 1;
	}

	/**
	 * Copy the portions of a result that are set during searching to this.
	 * @param result		Temporary result generated by MessageSearchService.search()
	 */
	public void copy(SearchResult result) {
		this.messageIds = result.messageIds;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Long getNextUID() {
		return nextUID;
	}

	public void setNextUID(Long nextUID) {
		this.nextUID = nextUID;
	}

	public Map<Long, String> getMessageIds() {
		return messageIds;
	}

	public void setMessageIds(Map<Long, String> messageIds) {
		this.messageIds = messageIds;
	}

	public void addMessageIds(Collection<String> newIds) {
		for (String id: newIds) {
			this.messageIds.put(nextUID++, id);
		}
	}

	public int getCount() {
		return this.messageIds.size();
	}

	public String getSearchQueryId() {
		return searchQueryId;
	}

	public void setSearchQueryId(String searchQueryId) {
		this.searchQueryId = searchQueryId;
	}

	public abstract void saveSearchResult() throws WorkspaceException;

	public abstract void deleteSearchResult() throws WorkspaceException;

	/**
	 * Get a page of results, possibly sorted.
	 * @param sortBy	Sort order, or null for unsorted
	 * @param sortDir	Sort direction (1 for forward, -1 for reverse)
	 * @param pageNum	Page number go get (1-indexed)
	 * @param pageSize	Size of pages to get
	 * @return List of results that constitute the page.  May be empty.
	 * @throws WorkspaceException
	 */
	public abstract List<String> getPage(String sortBy, int sortDir, int pageNum, int pageSize)
			throws ResultPageException;

}
